# -- Build system requirements (PEP 518) --

[build-system]
build-backend = 'setuptools.build_meta'
requires = ['cython>=3.0.0', 'setuptools>=70.0.0', 'versioningit>=3.1.1', 'wheel>=0.33.6']

# -- Dependency groups --
[dependency-groups]
build = [
  'cython>=3.0.0',
  'pip>=22.1.1',
  'setuptools>=70.0.0',
  'wheel>=0.33.6'
]
dev = [
  {include-group = 'build'},
  {include-group = 'docs'},
  {include-group = 'frameworks'},
  {include-group = 'lint'},
  {include-group = 'test'},
  {include-group = 'typing'}
]
docs = [
  'esbonio>=0.16.0',
  'jupytext>=1.14',
  'matplotlib>=3.8.4',
  'myst-parser>=4.0.0',
  'pygments>=2.7.3',
  'sphinx>=7.3.7',
  'sphinx-rtd-theme>=3.0.1',
  'sphinx-toolbox>=3.8.1'
]
frameworks = [
  # 3rd party frameworks with some interoperability with gt4py
  'atlas4py>=0.35'
]
lint = [
  'pre-commit>=4.0.1',
  'ruff>=0.8.0',
  'tach>=0.16.0'
]
test = [
  'coverage[toml]>=7.5.0',
  'hypothesis>=6.0.0',
  'nbmake>=1.4.6',
  'nox>=2025.02.09',
  'pytest>=8.0.1',
  'pytest-benchmark>=5.0.0',
  'pytest-cache>=1.0',
  'pytest-cov>=5.0.0',
  'pytest-factoryboy>=2.6.1',
  'pytest-instafail>=0.5.0',
  'pytest-xdist[psutil]>=3.5.0'
]
typing = [
  'mypy[faster-cache]>=1.13.0',
  'types-tabulate>=0.8.10',
  'types-PyYAML>=6.0.10',
  'types-decorator>=5.1.8',
  'types-docutils>=0.21.0',
  'types-pytz>=2024.2.0'
]

# -- Standard project description options (PEP 621) --
[project]
authors = [{name = 'ETH Zurich', email = 'gridtools@cscs.ch'}]
classifiers = [
  'Development Status :: 4 - Beta',
  'Environment :: Console',
  'Environment :: GPU :: NVIDIA CUDA',
  'Intended Audience :: Science/Research',
  'License :: OSI Approved :: BSD License',
  'Operating System :: POSIX',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: Implementation :: CPython',
  'Topic :: Scientific/Engineering :: Atmospheric Science',
  'Topic :: Scientific/Engineering :: Mathematics',
  'Topic :: Scientific/Engineering :: Physics'
]
dependencies = [
  'attrs>=21.3',
  'black>=22.6',
  'boltons>=20.1',
  'cached-property>=1.5.1',
  'click>=8.0.0',
  'cmake>=3.22',
  'cytoolz>=0.12.1',
  'deepdiff>=5.6.0',
  'devtools>=0.6',
  'diskcache>=5.6.3',
  'factory-boy>=3.3.0',
  "flufl-lock>=8.1.0",
  'frozendict>=2.3',
  'gridtools-cpp>=2.3.9,==2.*',
  'jinja2>=3.0.0',
  'lark>=1.1.2',
  'mako>=1.1',
  'nanobind>=1.4.0 ',
  'ninja>=1.10',
  'numpy>=1.23.3',
  'packaging>=20.0',
  'pybind11>=2.10.1',
  'setuptools>=70.0.0',
  'tabulate>=0.8.10',
  'toolz>=0.12.1',
  'typing-extensions>=4.11.0',
  'versioningit>=3.1.1',
  'xxhash>=1.4.4,<3.1.0'
]
description = 'Python library for generating high-performance implementations of stencil kernels for weather and climate modeling from a domain-specific language (DSL)'
dynamic = ['version']
keywords = [
  'gridtools',
  'stencil',
  'weather',
  'climate',
  'performance',
  'portable',
  'hpc'
]
license = {text = 'BSD-3 License'}  # TODO: waiting for PEP 639 being implemented by setuptools (https://github.com/codecov/codecov-cli/issues/605)
name = 'gt4py'
readme = 'README.md'
requires-python = '>=3.10, <3.13'

[project.optional-dependencies]
# bundles
all = ['gt4py[dace,formatting,jax,performance,testing]']
# device-specific extras
cuda11 = ['cupy-cuda11x>=12.0']
cuda12 = ['cupy-cuda12x>=12.0']
# features
dace = ['dace>=1.0.2,<1.1.0']  # v1.x will contain breaking changes, see https://github.com/spcl/dace/milestone/4
dace-next = ['dace']  # pull dace latest version from the git repository
formatting = ['clang-format>=9.0']
jax = ['jax>=0.4.26']
jax-cuda12 = ['jax[cuda12_local]>=0.4.26', 'gt4py[cuda12]']
performance = ['scipy>=1.9.2']
rocm4_3 = ['cupy-rocm-4-3>=13.3.0']
rocm5_0 = ['cupy-rocm-5-0>=13.3.0']
testing = ['hypothesis>=6.0.0', 'pytest>=7.0']

[project.scripts]
gtpyc = 'gt4py.cartesian.cli:gtpyc'

[project.urls]
Documentation = 'https://gridtools.github.io/gt4py'
Homepage = 'https://gridtools.github.io/'
Repository = 'https://github.com/GridTools/gt4py'

# ---- Other tools ----
# -- coverage --
[tool.coverage]

[tool.coverage.html]
directory = 'tests/_reports/coverage_html'

[tool.coverage.paths]
source = ['src/', '.nox/py*/lib/python3.*/site-packages/']

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  'raise AssertionError',  # Don't complain if tests don't hit defensive assertion code
  'raise NotImplementedError',  # Don't complain if tests don't hit defensive assertion code
  'if 0:',  # Don't complain if non-runnable code isn't run
  'if __name__ == .__main__.:'  # Don't complain if non-runnable code isn't run
]
ignore_errors = true

[tool.coverage.run]
branch = true
source_pkgs = ['gt4py']

# -- mypy  --
[tool.mypy]
disallow_incomplete_defs = true
exclude = [
  '^setup\.py$',
  'build/.*$',
  'ci/*.$',
  'docs/.*$',
  'tests/.*$'
]
ignore_missing_imports = true
implicit_optional = false
implicit_reexport = false
install_types = true
namespace_packages = false
# pretty = true
show_column_numbers = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

# GT4Py configs
[[tool.mypy.overrides]]
allow_incomplete_defs = false
allow_untyped_defs = false
ignore_missing_imports = false
module = 'gt4py.*'

[[tool.mypy.overrides]]
# The following ignore_errors are only temporary.
# TODO: Fix errors and enable these settings.
allow_incomplete_defs = true
allow_untyped_defs = true
follow_imports = 'silent'
module = 'gt4py.cartesian.*'

[[tool.mypy.overrides]]
ignore_errors = true
module = 'gt4py.cartesian.frontend.nodes'

[[tool.mypy.overrides]]
ignore_errors = true
module = 'gt4py.cartesian.frontend.node_util'

[[tool.mypy.overrides]]
ignore_errors = true
module = 'gt4py.cartesian.frontend.gtscript_frontend'

[[tool.mypy.overrides]]
ignore_errors = true
module = 'gt4py.cartesian.frontend.defir_to_gtir'

[[tool.mypy.overrides]]
ignore_errors = true
module = 'gt4py.cartesian.frontend.meta'

[[tool.mypy.overrides]]
module = 'gt4py.eve.extended_typing'
warn_unused_ignores = false

[[tool.mypy.overrides]]
# TODO: Make this false and fix errors
allow_untyped_defs = true
follow_imports = 'silent'
module = 'gt4py.storage.*'
warn_unused_ignores = false

[[tool.mypy.overrides]]
allow_incomplete_defs = true
allow_untyped_defs = true
module = 'gt4py.next.iterator.*'

[[tool.mypy.overrides]]
allow_incomplete_defs = true
allow_untyped_defs = true
module = 'gt4py.next.program_processors.runners.dace_iterator.*'

[[tool.mypy.overrides]]
ignore_errors = true
module = 'gt4py.next.iterator.runtime'

# -- pytest --
[tool.pytest]

[tool.pytest.ini_options]
markers = [
  'all: special marker that skips all tests',
  'requires_atlas: tests that require `atlas4py` bindings package',
  'requires_dace: tests that require `dace` package',
  'requires_gpu: tests that require a NVidia GPU (`cupy` and `cudatoolkit` are required)',
  'uses_applied_shifts: tests that require backend support for applied-shifts',
  'uses_can_deref: tests that require backend support for can_deref builtin function',
  'uses_composite_shifts: tests that use composite shifts in unstructured domain',
  'uses_constant_fields: tests that require backend support for constant fields',
  'uses_dynamic_offsets: tests that require backend support for dynamic offsets',
  'uses_floordiv: tests that require backend support for floor division',
  'uses_if_stmts: tests that require backend support for if-statements',
  'uses_index_fields: tests that require backend support for index fields',
  'uses_ir_if_stmts',
  'uses_lift: tests that require backend support for lift builtin function',
  'uses_negative_modulo: tests that require backend support for modulo on negative numbers',
  'uses_origin: tests that require backend support for domain origin',
  'uses_reduce_with_lambda: tests that use lambdas as reduce functions',
  'uses_reduction_with_only_sparse_fields: tests that require backend support for with sparse fields',
  'uses_scalar_in_domain_and_fo',
  'uses_scan: tests that uses scan',
  'uses_scan_in_field_operator: tests that require backend support for scan in field operator',
  'uses_scan_in_stencil: tests that require backend support for scan in stencil',
  'uses_scan_without_field_args: tests that require calls to scan that do not have any fields as arguments',
  'uses_scan_nested: tests that use nested scans',
  'uses_scan_requiring_projector: tests need a projector implementation in gtfn',
  'uses_sparse_fields: tests that require backend support for sparse fields',
  'uses_sparse_fields_as_output: tests that require backend support for writing sparse fields',
  'uses_strided_neighbor_offset: tests that require backend support for strided neighbor offset',
  'uses_tuple_args: tests that require backend support for tuple arguments',
  'uses_tuple_args_with_different_but_promotable_dims: test that requires backend support for tuple args with different but promotable dims',
  'uses_tuple_iterator: tests that require backend support to deref tuple iterators',
  'uses_tuple_returns: tests that require backend support for tuple results',
  'uses_zero_dimensional_fields: tests that require backend support for zero-dimensional fields',
  'uses_cartesian_shift: tests that use a Cartesian connectivity',
  'uses_unstructured_shift: tests that use a unstructured connectivity',
  'uses_max_over: tests that use the max_over builtin',
  'uses_mesh_with_skip_values: tests that use a mesh with skip values',
  'uses_concat_where: tests that use the concat_where builtin',
  'uses_program_metrics: tests that require backend support for program metrics',
  'checks_specific_error: tests that rely on the backend to produce a specific error message'
]
norecursedirs = ['dist', 'build', 'cpp_backend_tests/build*', '_local/*', '.*']
testpaths = 'tests'
xfail_strict = true

# -- ruff --
[tool.ruff]
line-length = 100  # It should be the same as in `tool.black.line-length` above
respect-gitignore = true
show-fixes = true
# show-source = true
target-version = 'py310'

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# # Rules sets:
# E: pycodestyle
# F: Pyflakes
# I: isort
# B: flake8-bugbear
# A: flake8-builtins
# T10: flake8-debugger
# ERA: eradicate
# NPY: NumPy-specific rules
# RUF: Ruff-specific rules
ignore = [
  'E501',  # [line-too-long]
  'B905'  # [zip-without-explicit-strict]  # TODO(egparedes): Reevaluate this rule
]
select = ['E', 'F', 'I', 'B', 'A', 'T10', 'ERA', 'NPY', 'RUF']
typing-modules = ['gt4py.eve.extended_typing']
unfixable = []

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ['builtins']

[tool.ruff.lint.isort]
combine-as-imports = true
# force-wrap-aliases = true
known-first-party = ['gt4py', '__externals__', '__gtscript__']
known-third-party = [
  'attr',
  'black',
  'boltons',
  'cached_property',
  'click',
  'cupy',
  'dace',
  'devtools',
  'factory',
  'hypothesis',
  'importlib_resources',
  'jinja2',
  'mako',
  'networkx',
  'numpy',
  'packaging',
  'pybind11',
  'pytest',
  'pytest_factoryboy',
  'setuptools',
  'tabulate',
  'typing_extensions',
  'xxhash'
]
lines-after-imports = 2
order-by-type = true
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'tests',
  'local-folder'
]
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
'tests' = ['cartesian_tests', 'eve_tests', 'next_tests', 'storage_tests']

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.per-file-ignores]
'src/gt4py/eve/extended_typing.py' = ['F401', 'F405']
'src/gt4py/next/__init__.py' = ['F401']

# -- setuptools build backend --
[tool.setuptools]
platforms = ['Linux', 'Mac']

[tool.setuptools.cmdclass]
# This is required for the `onbuild` versioningit hook
build_py = "versioningit.cmdclass.build_py"
sdist = "versioningit.cmdclass.sdist"

[tool.setuptools.package-data]
'*' = ['*.in', '*.txt']
'gt4py' = ['py.typed', '*.md', '*.rst']

[tool.setuptools.packages]
find = {namespaces = false, where = ['src']}

# -- uv: packages & workspace --
[tool.uv]
conflicts = [
  [
    {extra = 'cuda11'},
    {extra = 'jax-cuda12'},
    {extra = 'rocm4_3'},
    {extra = 'rocm5_0'}
  ],
  [
    {extra = 'dace'},
    {extra = 'dace-next'}
  ],
  [
    {extra = 'all'},
    {extra = 'dace-next'}
  ]
]
required-version = ">=0.6.10"

[[tool.uv.index]]
explicit = true
name = 'test.pypi'
url = 'https://test.pypi.org/simple/'

[tool.uv.sources]
atlas4py = {index = "test.pypi"}
dace = {git = "https://github.com/GridTools/dace", tag = "__gt4py-next-integration_2025_06_13", extra = "dace-next"}

# -- versioningit --
[tool.versioningit]
default-version = "0.0.0+missing.version.info"

[tool.versioningit.format]
dirty = "{base_version}+dirty"  # Example: 1.2.3+dirty
distance = "{base_version}.post{distance}+{rev}"  # Example: 1.2.3.post42+e174a1f
distance-dirty = "{base_version}.post{distance}+{rev}.dirty"  # Example: 1.2.3.post42+e174a1f.dirty

[tool.versioningit.onbuild]
build-file = "gt4py/__about__.py"
regex = "^\\s*on_build_version:\\s*Final\\s*=\\s*(?P<version>.*)"
source-file = "src/gt4py/__about__.py"

[tool.versioningit.vcs]
describe-subst = "$Format:%(describe:tags,match=v*)$"
method = "git-archive"
