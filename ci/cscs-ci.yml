include:
- remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext.yml'

.py311: &py311
  PYVERSION_PREFIX: py311
  PYVERSION: 3.11.9

.py310: &py310
  PYVERSION_PREFIX: py310
  PYVERSION: 3.10.9

.py39: &py39
  PYVERSION_PREFIX: py39
  PYVERSION: 3.9.1

.py38: &py38
  PYVERSION_PREFIX: py38
  PYVERSION: 3.8.5

stages:
- baseimage
- image
- test

.build_baseimage:
  stage: baseimage
  # we create a tag that depends on the SHA value of ci/base.Dockerfile, this way
  # a new base image is only built when the SHA of this file changes
  # If there are more dependency files that should change the tag-name of the base container
  # image, they can be added too.
  # Since the base image name is runtime dependent, we need to carry the value of it to
  # the following jobs via a dotenv file.
  before_script:
  - DOCKER_TAG=`sha256sum $DOCKERFILE | head -c 16`
  - export PERSIST_IMAGE_NAME=$CSCS_REGISTRY_PATH/public/$ARCH/base/gt4py-ci:$DOCKER_TAG-$PYVERSION
  - echo "BASE_IMAGE_${PYVERSION_PREFIX}=$PERSIST_IMAGE_NAME" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  variables:
    DOCKERFILE: ci/base.Dockerfile
    # change to 'always' if you want to rebuild, even if target tag exists already (if-not-exists is the default, i.e. we could also skip the variable)
    CSCS_REBUILD_POLICY: if-not-exists
    DOCKER_BUILD_ARGS: '["CUDA_VERSION=$CUDA_VERSION", "CUPY_PACKAGE=$CUPY_PACKAGE", "PYVERSION=$PYVERSION", "CI_PROJECT_DIR=$CI_PROJECT_DIR"]'
.build_baseimage_x86_64:
  extends: [.container-builder-cscs-zen2, .build_baseimage]
  variables:
    CUDA_VERSION: 11.2.2
    CUPY_PACKAGE: cupy-cuda11x
.build_baseimage_aarch64:
  extends: [.container-builder-cscs-gh200, .build_baseimage]
  variables:
    CUDA_VERSION: 12.4.1
    CUPY_PACKAGE: cupy-cuda12x

build_py311_baseimage_x86_64:
  extends: .build_baseimage_x86_64
  variables:
    <<: *py311
build_py311_baseimage_aarch64:
  extends: .build_baseimage_aarch64
  variables:
    <<: *py311

build_py310_baseimage_x86_64:
  extends: .build_baseimage_x86_64
  variables:
    <<: *py310
build_py310_baseimage_aarch64:
  extends: .build_baseimage_aarch64
  variables:
    <<: *py310

build_py39_baseimage_x86_64:
  extends: .build_baseimage_x86_64
  variables:
    <<: *py39
build_py39_baseimage_aarch64:
  extends: .build_baseimage_aarch64
  variables:
    <<: *py39

build_py38_baseimage_x86_64:
  extends: .build_baseimage_x86_64
  variables:
    <<: *py38


.build_image:
  stage: image
  variables:
    # make sure we use a unique name here, otherwise we could create a race condition, when multiple pipelines
    # are running.
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/public/$ARCH/gt4py/gt4py-ci:$CI_COMMIT_SHA-$PYVERSION
    DOCKERFILE: ci/checkout.Dockerfile
    DOCKER_BUILD_ARGS: '["PYVERSION=$PYVERSION", "BASE_IMAGE=${BASE_IMAGE_${PYVERSION_PREFIX}}"]'
.build_image_x86_64:
  extends: [.container-builder-cscs-zen2, .build_image]
.build_image_aarch64:
  extends: [.container-builder-cscs-gh200, .build_image]

build_py311_image_x86_64:
  extends: .build_image_x86_64
  needs: [build_py311_baseimage_x86_64]
  variables:
    <<: *py311
build_py311_image_aarch64:
  extends: .build_image_aarch64
  needs: [build_py311_baseimage_aarch64]
  variables:
    <<: *py311

build_py310_image_x86_64:
  extends: .build_image_x86_64
  needs: [build_py310_baseimage_x86_64]
  variables:
    <<: *py310
build_py310_image_aarch64:
  extends: .build_image_aarch64
  needs: [build_py310_baseimage_aarch64]
  variables:
    <<: *py310

build_py39_image_x86_64:
  extends: .build_image_x86_64
  needs: [build_py39_baseimage_x86_64]
  variables:
    <<: *py39
build_py39_image_aarch64:
  extends: .build_image_aarch64
  needs: [build_py39_baseimage_aarch64]
  variables:
    <<: *py39

build_py38_image_x86_64:
  extends: .build_image_x86_64
  needs: [build_py38_baseimage_x86_64]
  variables:
    <<: *py38


.test_helper:
  stage: test
  image: $CSCS_REGISTRY_PATH/public/$ARCH/gt4py/gt4py-ci:$CI_COMMIT_SHA-$PYVERSION
  script:
  - cd /gt4py.src
  - python -c "import cupy"
  - tox run -e $SUBPACKAGE-$PYVERSION_PREFIX$VARIANT$SUBVARIANT
  variables:
    CRAY_CUDA_MPS: 1
    SLURM_JOB_NUM_NODES: 1
    SLURM_TIMELIMIT: 120
    NUM_PROCESSES: auto
    VIRTUALENV_SYSTEM_SITE_PACKAGES: 1
.test_helper_x86_64:
  extends: [.container-runner-daint-gpu, .test_helper]
  parallel:
    matrix:
    - SUBPACKAGE: [cartesian, storage]
      VARIANT: [-internal, -dace]
      SUBVARIANT: [-cuda11x, -cpu]
    - SUBPACKAGE: eve
    - SUBPACKAGE: next
      VARIANT: [-nomesh, -atlas]
      SUBVARIANT: [-cuda11x, -cpu]
.test_helper_aarch64:
  extends: [.container-runner-todi-gh200, .test_helper]
  parallel:
    matrix:
    - SUBPACKAGE: [cartesian, storage]
      VARIANT: [-internal, -dace]
      SUBVARIANT: [-cuda12x, -cpu]
    - SUBPACKAGE: eve
    - SUBPACKAGE: next
      VARIANT: [-nomesh, -atlas]
      SUBVARIANT: [-cuda12x, -cpu]
  variables:
    # Grace-Hopper gpu architecture is not enabled by default in CUDA build
    CUDAARCHS: "90"
    # limit test parallelism to avoid "OSError: too many open files" in the gt4py build stage
    NUM_PROCESSES: 32

test_py311_x86_64:
  extends: [.test_helper_x86_64]
  needs: [build_py311_image_x86_64]
  variables:
    <<: *py311
test_py311_aarch64:
  extends: [.test_helper_aarch64]
  needs: [build_py311_image_aarch64]
  variables:
    <<: *py311

test_py310_x86_64:
  extends: [.test_helper_x86_64]
  needs: [build_py310_image_x86_64]
  variables:
    <<: *py310
test_py310_aarch64:
  extends: [.test_helper_aarch64]
  needs: [build_py310_image_aarch64]
  variables:
    <<: *py310

test_py39_x86_64:
  extends: [.test_helper_x86_64]
  needs: [build_py39_image_x86_64]
  variables:
    <<: *py39
test_py39_aarch64:
  extends: [.test_helper_aarch64]
  needs: [build_py39_image_aarch64]
  variables:
    <<: *py39

test_py38_x86_64:
  extends: [.test_helper_x86_64]
  needs: [build_py38_image_x86_64]
  variables:
    <<: *py38
