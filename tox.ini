[tox]
requires =
    tox>=4.2
    virtualenv>20.2
labels =
    test-bla = bla-bar, bla-foo
    test-cartesian-cpu = cartesian-internal-cpu, cartesian-dace-cpu
    test-eve-cpu = eve
    test-next-cpu = next-nomesh-cpu, next-atlas-cpu
    test-storage-cpu = storage-internal-cpu, storage-dace-cpu
    test-cpu = cartesian-internal-cpu, cartesian-dace-cpu, eve, next-nomesh-cpu, next-atlas-cpu, storage-internal-cpu, storage-dace-cpu

[testenv]
base_python = py310
deps = -r {tox_root}{/}{env:ENV_REQUIREMENTS_FILE:requirements-dev.txt}
constrain_package_deps = true
use_frozen_constraints = true
extras =
    testing
    formatting
    dace: dace
    cuda: cuda
    cuda11x: cuda11x
    cuda12x: cuda12x
package = wheel
wheel_build_env = .pkg
pass_env = CUDAARCHS, NUM_PROCESSES, GT4PY_*
set_env =
    PYTEST_ADDOPTS = --color=auto --instafail
    PYTHONWARNINGS = {env:PYTHONWARNINGS:ignore:Support for `[tool.setuptools]` in `pyproject.toml` is still *beta*:UserWarning,ignore:Field View Program:UserWarning}

[testenv:bla-{foo,bar}]
description = Run bla tests
commands =
    python --version

# -- Primary tests --
[testenv:cartesian-{internal,dace}-{cpu,cuda,cuda11x,cuda12x}]
description = Run 'gt4py.cartesian' tests
pass_env = {[testenv]pass_env}, BOOST_ROOT, BOOST_HOME, CUDA_HOME, CUDA_PATH, CXX, CC, OPENMP_CPPFLAGS, OPENMP_LDFLAGS, PIP_USER, PYTHONUSERBASE
allowlist_externals =
    make
    gcc
    g++
    ldd
    rm
commands =
    python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "\
            internal: not requires_dace \
            dace: requires_dace \
            cpu: and not requires_gpu \
            {cuda,cuda11x,cuda12x}: and requires_gpu \
        " {posargs} tests{/}cartesian_tests
    python -m pytest --doctest-modules --doctest-ignore-import-errors src{/}gt4py{/}cartesian
# commands_pre =
#     rm -Rf tests/_reports/coverage*
# commands_post =
#     coverage json --rcfile=setup.cfg
#     coverage html --rcfile=setup.cfg --show-contexts

[testenv:eve]
description = Run 'gt4py.eve' tests
commands =
    python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} {posargs} tests{/}eve_tests
    python -m pytest --doctest-modules src{/}gt4py{/}eve

[testenv:next-{nomesh,atlas}-{cpu,cuda,cuda11x,cuda12x}]
description = Run 'gt4py.next' tests
pass_env = {[testenv]pass_env}, BOOST_ROOT, BOOST_HOME, CUDA_HOME, CUDA_PATH
deps =
    -r {tox_root}{/}requirements-dev.txt
    atlas: atlas4py
set_env =
    {[testenv]set_env}
    PIP_EXTRA_INDEX_URL = {env:PIP_EXTRA_INDEX_URL:https://test.pypi.org/simple/}
commands =
    python -m pytest --suppress-no-test-exit-code --cache-clear -v -n {env:NUM_PROCESSES:1} -m "\
            nomesh: not requires_atlas \
            atlas: requires_atlas \
            cpu: and not requires_gpu \
            {cuda,cuda11x,cuda12x}: and requires_gpu \
        " {posargs} tests{/}next_tests
    pytest --doctest-modules src{/}gt4py{/}next

[testenv:storage-{internal,dace}-{cpu,cuda,cuda11x,cuda12x}]
description = Run 'gt4py.storage' tests
commands =
    python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "\
            cpu: not requires_gpu \
            {cuda,cuda11x,cuda12x}: requires_gpu \
        " {posargs} tests{/}storage_tests
    # pytest doctest-modules {posargs} src{/}gt4py{/}storage

# -- Secondary tests --
[testenv:notebooks]
description = Run notebooks
commands_pre =
    jupytext docs/user/next/QuickstartGuide.md --to .ipynb
    jupytext docs/user/next/advanced/*.md --to .ipynb
commands =
    python -m pytest --nbmake docs/user/next/workshop/slides -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake docs/user/next/workshop/exercises -k 'solutions' -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake docs/user/next/QuickstartGuide.ipynb -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake docs/user/next/advanced -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake examples -v -n {env:NUM_PROCESSES:1}

# -- Other artifacts --
[testenv:dev-atlas]
description = Initialize development environment for gt4py
deps =
    -r {tox_root}{/}requirements-dev.txt
    atlas: atlas4py
package = editable-legacy  # => use_develop = True
set_env =
    {[testenv]set_env}
    PIP_EXTRA_INDEX_URL = {env:PIP_EXTRA_INDEX_URL:https://test.pypi.org/simple/}

# [testenv:diagrams]
# install_command = echo {packages}
# skip_install = true
# allowlist_externals =
#     /bin/bash
#     make
#     gcc
#     g++
#     ldd
#     rm
#     plantuml
#     git
#     echo
# changedir = docs/development/ADRs
# commands =
#     plantuml ./*.md -tsvg -o _static
#     git add _static
# commands_post =

[testenv:requirements-{base,py38,py39,py310,py311}]
description =
    base: Update pinned development requirements
    py38: Update requirements for testing with python version 3.8
    py39: Update requirements for testing with python version 3.9
    py310: Update requirements for testing with python version 3.10
    py311: Update requirements for testing with python version 3.11
base_python =
    base: py38
    py38: py38
    py39: py39
    py310: py310
    py311: py311
deps =
    cogapp>=3.3
    packaging>=20.0
    pip-tools>=6.10
package = skip
set_env =
    CUSTOM_COMPILE_COMMAND = "tox run -e requirements-base"
allowlist_externals =
    mv
commands =
    -mv constraints.txt constraints.txt.old
    -mv requirements-dev.txt requirements-dev.old
    # Run cog to update requirements files from pyproject
    cog -r -P min-requirements-test.txt min-extra-requirements-test.txt
    # Generate constraints file removing extras
    # (extras are not supported by pip in constraints files)
    pip-compile -r --resolver=backtracking \
    --annotation-style line \
    --build-isolation \
    --strip-extras \
    --allow-unsafe \
    --extra dace \
    --extra formatting \
    --extra jax-cpu \
    --extra performance \
    --extra testing \
    -o constraints.txt \
    pyproject.toml requirements-dev.in
    # Generate actual requirements file
    # (compiling from scratch again to print actual package sources)
    pip-compile --resolver=backtracking \
    --annotation-style line \
    --build-isolation \
    --allow-unsafe \
    --extra dace \
    --extra formatting \
    --extra jax-cpu \
    --extra testing \
    -c constraints.txt \
    -o requirements-dev.txt \
    pyproject.toml requirements-dev.in
    # Run cog to update .pre-commit-config.yaml with new versions
    base: cog -r -P .pre-commit-config.yaml
