[tox]
requires =
    tox>=4.2
    virtualenv>20.2
envlist =
    eve-py{310}
    storage-py{310}-{internal}-{cpu}
    next-py{310}-{nomesh,atlas}
    cartesian-py{38,39,310}-{internal,dace}-{cpu}
#    dev-{nomesh,atlas}
#    docs

[testenv]
deps = -r {tox_root}/requirements-dev.txt
passenv = NUM_PROCESSES
extras =
    testing
    formatting
    dace: dace
    cuda: cuda
    cuda110: cuda110
    cuda111: cuda111
    cuda112: cuda112
    cuda113: cuda113
    cuda114: cuda114
    cuda115: cuda115
    cuda116: cuda116
    cuda117: cuda117
    cuda11x: cuda11x

[testenv:cartesian-py{38,39,310}-{internal,dace}-{cpu,cuda,cuda110,cuda111,cuda112,cuda113,cuda114,cuda115,cuda116,cuda117,cuda11x}]
description = Run 'gt4py.cartesian' tests
passenv = NUM_PROCESSES, BOOST_ROOT, BOOST_HOME, CUDA_HOME, CUDA_PATH, CXX, CC, OPENMP_CPPFLAGS, OPENMP_LDFLAGS, PIP_USER, PYTHONUSERBASE
allowlist_externals =
    #/bin/bash
    make
    gcc
    g++
    ldd
    rm
commands =
    internal-cpu: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_gpu and not requires_dace" {posargs} tests{/}cartesian_tests
    internal-{cuda,cuda110,cuda111,cuda112,cuda113,cuda114,cuda115,cuda116,cuda117,cuda11x}: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_gpu and not requires_dace" {posargs} tests{/}cartesian_tests
    dace-cpu: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_gpu and requires_dace" {posargs} tests{/}cartesian_tests
    dace-{cuda,cuda110,cuda111,cuda112,cuda113,cuda114,cuda115,cuda116,cuda117,cuda11x}: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_gpu and requires_dace" {posargs} tests{/}cartesian_tests
    pytest --doctest-modules --doctest-ignore-import-errors src{/}gt4py{/}cartesian
# commands_pre =
#     rm -Rf tests/_reports/coverage*
;commands_post =
;    coverage json --rcfile=setup.cfg
;    coverage html --rcfile=setup.cfg --show-contexts

[testenv:next-py{310}-{nomesh,atlas}]
description = Run 'gt4py.next' tests
commands_pre =
    atlas: pip install -i https://test.pypi.org/simple/ atlas4py
commands =
    nomesh: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_atlas" {posargs} tests{/}next_tests
    atlas: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_atlas" {posargs} tests{/}next_tests
    pytest --doctest-modules src{/}gt4py{/}next

[testenv:eve-py{38,39,310}]
description = Run 'gt4py.eve' tests
; We must ignore the common package's Python 3.10 requirement to test eve on older versions.
; This should go away once eve and gt4py have their separate Python packages.
install_command = python -m pip install --ignore-requires-python {opts} {packages}
commands =
    pytest --cache-clear -v -n {env:NUM_PROCESSES:1} {posargs} tests{/}eve_tests
    pytest --doctest-modules src{/}gt4py{/}eve

[testenv:storage-py{38,39,310}-{internal,dace}-{cpu,cuda,cuda110,cuda111,cuda112,cuda113,cuda114,cuda115,cuda116,cuda117,cuda11x}]
description = Run 'gt4py.storage' tests
commands =
    cpu: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_gpu" {posargs} tests{/}storage_tests
    {cuda,cuda110,cuda111,cuda112,cuda113,cuda114,cuda115,cuda116,cuda117,cuda11x}: pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_gpu" {posargs} tests{/}storage_tests
    #pytest doctest-modules {posargs} src{/}gt4py{/}storage

# [testenv:docs]
# usedevelop = true
# commands_pre =
# changedir = docs/user/next
# commands =
#     jupytext QuickstartGuide.md --to .py
#     python QuickstartGuide.py
# commands_post =

# [testenv:diagrams]
# install_command = echo {packages}
# skip_install = true
# allowlist_externals =
#     /bin/bash
#     make
#     gcc
#     g++
#     ldd
#     rm
#     plantuml
#     git
#     echo
# changedir = docs/development/ADRs
# commands =
#     plantuml ./*.md -tsvg -o _static
#     git add _static
# commands_post =
