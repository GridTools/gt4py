[tox]
requires =
    tox>=4.2
    virtualenv>20.2
envlist =
    cartesian-py{310}-{internal,dace}-{cpu}
    eve-py{310}
    next-py{310}-{nomesh,atlas}
    storage-py{310}-{internal,dace}-{cpu}
    linters-py{310}
#    docs
labels =
    test-cartesian-cpu = cartesian-py38-internal-cpu, cartesian-py39-internal-cpu, cartesian-py310-internal-cpu, \
    cartesian-py311-internal-cpu, cartesian-py38-dace-cpu, cartesian-py39-dace-cpu, cartesian-py310-dace-cpu, \
    cartesian-py311-dace-cpu

    test-eve-cpu = eve-py38, eve-py39, eve-py310, eve-py311

    test-next-cpu = next-py310-nomesh, next-py311-nomesh, next-py310-atlas, next-py311-atlas

    test-storage-cpu = storage-py38-internal-cpu, storage-py39-internal-cpu, storage-py310-internal-cpu, \
    storage-py311-internal-cpu, storage-py38-dace-cpu, storage-py39-dace-cpu, storage-py310-dace-cpu, \
    storage-py311-dace-cpu

    test-cpu = cartesian-py38-internal-cpu, cartesian-py39-internal-cpu, cartesian-py310-internal-cpu, \
    cartesian-py311-internal-cpu, cartesian-py38-dace-cpu, cartesian-py39-dace-cpu, cartesian-py310-dace-cpu, \
    cartesian-py311-dace-cpu, \
    eve-py38, eve-py39, eve-py310, eve-py311, \
    next-py310-nomesh, next-py311-nomesh, next-py310-atlas, next-py311-atlas, \
    storage-py38-internal-cpu, storage-py39-internal-cpu, storage-py310-internal-cpu, storage-py311-internal-cpu, \
    storage-py38-dace-cpu, storage-py39-dace-cpu, storage-py310-dace-cpu, storage-py311-dace-cpu

[testenv]
deps = -r {tox_root}{/}{env:ENV_REQUIREMENTS_FILE:requirements-dev.txt}
constrain_package_deps = true
use_frozen_constraints = true
extras =
    testing
    formatting
    dace: dace
    cuda: cuda
    cuda11x: cuda11x
    cuda12x: cuda12x
package = wheel
wheel_build_env = .pkg
pass_env = NUM_PROCESSES, GT4PY_BUILD_CACHE_LIFETIME, GT4PY_BUILD_CACHE_DIR
set_env =
    PYTHONWARNINGS = {env:PYTHONWARNINGS:ignore:Support for `[tool.setuptools]` in `pyproject.toml` is still *beta*:UserWarning}

# -- Primary tests --
[testenv:cartesian-py{38,39,310,311}-{internal,dace}-{cpu,cuda,cuda11x,cuda12x}]
description = Run 'gt4py.cartesian' tests
pass_env = {[testenv]pass_env}, BOOST_ROOT, BOOST_HOME, CUDA_HOME, CUDA_PATH, CXX, CC, OPENMP_CPPFLAGS, OPENMP_LDFLAGS, PIP_USER, PYTHONUSERBASE
allowlist_externals =
    make
    gcc
    g++
    ldd
    rm
commands =
    internal-cpu: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_gpu and not requires_dace" {posargs} tests{/}cartesian_tests
    internal-{cuda,cuda11x,cuda12x}: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_gpu and not requires_dace" {posargs} tests{/}cartesian_tests
    dace-cpu: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_gpu and requires_dace" {posargs} tests{/}cartesian_tests
    dace-{cuda,cuda11x,cuda12x}: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_gpu and requires_dace" {posargs} tests{/}cartesian_tests
    python -m pytest --doctest-modules --doctest-ignore-import-errors src{/}gt4py{/}cartesian
# commands_pre =
#     rm -Rf tests/_reports/coverage*
;commands_post =
;    coverage json --rcfile=setup.cfg
;    coverage html --rcfile=setup.cfg --show-contexts

[testenv:eve-py{38,39,310,311}]
description = Run 'gt4py.eve' tests
commands =
    python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} {posargs} tests{/}eve_tests
    python -m pytest --doctest-modules src{/}gt4py{/}eve

[testenv:next-py{310,311}-{nomesh,atlas}-{cpu,cuda,cuda11x,cuda12x}]
description = Run 'gt4py.next' tests
pass_env = {[testenv]pass_env}, BOOST_ROOT, BOOST_HOME, CUDA_HOME, CUDA_PATH
deps =
    -r {tox_root}{/}requirements-dev.txt
    atlas: atlas4py
set_env =
    {[testenv]set_env}
    PIP_EXTRA_INDEX_URL = {env:PIP_EXTRA_INDEX_URL:https://test.pypi.org/simple/}
commands =
    nomesh-cpu: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_atlas and not requires_gpu" {posargs} tests{/}next_tests
    nomesh-{cuda,cuda11x,cuda12x}: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_atlas and requires_gpu" {posargs} tests{/}next_tests
    atlas-cpu: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_atlas and not requires_gpu" {posargs} tests{/}next_tests
    # atlas-{cuda,cuda11x,cuda12x}: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_atlas and requires_gpu" {posargs} tests{/}next_tests   # TODO(ricoh): activate when such tests exist
    pytest --doctest-modules src{/}gt4py{/}next

[testenv:storage-py{38,39,310,311}-{internal,dace}-{cpu,cuda,cuda11x,cuda12x}]
description = Run 'gt4py.storage' tests
commands =
    cpu: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "not requires_gpu" {posargs} tests{/}storage_tests
    {cuda,cuda11x,cuda12x}: python -m pytest --cache-clear -v -n {env:NUM_PROCESSES:1} -m "requires_gpu" {posargs} tests{/}storage_tests
    #pytest doctest-modules {posargs} src{/}gt4py{/}storage

# -- Secondary tests --
[testenv:linters-py{38,39,310,311}]
description = Run linters
commands =
    flake8 .{/}src
    mypy .{/}src

[testenv:notebooks-py{310,311}]
description = Run notebooks
commands_pre =
    jupytext docs/user/next/QuickstartGuide.md --to .ipynb
commands =
    python -m pytest --nbmake docs/user/next/workshop/slides -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake docs/user/next/workshop/exercises -k 'solutions' -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake docs/user/next/QuickstartGuide.ipynb -v -n {env:NUM_PROCESSES:1}
    python -m pytest --nbmake examples -v -n {env:NUM_PROCESSES:1}

# -- Other artefacts --
[testenv:dev-py{38,39,310,311}{-atlas,}]
description = Initialize development environment for gt4py
deps =
    -r {tox_root}{/}requirements-dev.txt
    atlas: atlas4py
package = editable-legacy  # => use_develop = True
set_env =
    {[testenv]set_env}
    PIP_EXTRA_INDEX_URL = {env:PIP_EXTRA_INDEX_URL:https://test.pypi.org/simple/}

# [testenv:diagrams]
# install_command = echo {packages}
# skip_install = true
# allowlist_externals =
#     /bin/bash
#     make
#     gcc
#     g++
#     ldd
#     rm
#     plantuml
#     git
#     echo
# changedir = docs/development/ADRs
# commands =
#     plantuml ./*.md -tsvg -o _static
#     git add _static
# commands_post =

[testenv:requirements-{base,py38,py39,py310,py311}]
description =
    base: Update pinned development requirements
    py38: Update requirements for testing a specific python version
    py39: Update requirements for testing a specific python version
    py310: Update requirements for testing a specific python version
    py311: Update requirements for testing a specific python version
base_python =
    base: py38
    py38: py38
    py39: py39
    py310: py310
    py311: py311
deps =
    cogapp>=3.3
    packaging>=20.0
    pip-tools>=6.10
package = skip
set_env =
    CUSTOM_COMPILE_COMMAND = "tox run -e requirements-base"
allowlist_externals =
    mv
commands =
    -mv constraints.txt constraints.txt.old
    -mv requirements-dev.txt requirements-dev.old
    # Run cog to update requirements files from pyproject
    cog -r -P min-requirements-test.txt min-extra-requirements-test.txt
    # Generate constraints file removing extras
    # (extras are not supported by pip in constraints files)
    pip-compile -r --resolver=backtracking \
    --annotation-style line \
    --build-isolation \
    --strip-extras \
    --allow-unsafe \
    --extra dace \
    --extra formatting \
    --extra jax-cpu \
    --extra performance \
    --extra testing \
    -o constraints.txt \
    pyproject.toml requirements-dev.in
    # Generate actual requirements file
    # (compiling from scratch again to print actual package sources)
    pip-compile --resolver=backtracking \
    --annotation-style line \
    --build-isolation \
    --allow-unsafe \
    --extra dace \
    --extra formatting \
    --extra jax-cpu \
    --extra testing \
    -c constraints.txt \
    -o requirements-dev.txt \
    pyproject.toml requirements-dev.in
    # Run cog to update .pre-commit-config.yaml with new versions
    base: cog -r -P .pre-commit-config.yaml
